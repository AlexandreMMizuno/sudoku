#include <stdio.h>
#include <stdlib.h>

typedef struct Matriz
{
    int linha;
    int coluna;
    int **matriz;
}VetorBi;

VetorBi *matriz(int linha, int coluna ){
    
   int j=0;
    
   VetorBi *matriz = malloc( sizeof(VetorBi));

   matriz->linha = linha;
   matriz->coluna = coluna;
        
   matriz->matriz = malloc( sizeof(int) * matriz->coluna );
             
   for ( j = 0; j < matriz->linha; j++ )
   {    
      matriz->matriz[j] = malloc( sizeof(int) * matriz->linha );              
   }
   
   return matriz;
}

void desalocar(VetorBi *matriz){
     int c, x;
     
     for(x=0; x<matriz->coluna; x++ )
         free(matriz->matriz[x]);
     
     free(matriz->matriz);
     free(matriz);
     
}

void embaralharNumeros(int *vetor){
     
     int k;
     
     for (k = 0; k < 9; k++)
     {
          size_t num = k + rand() / (RAND_MAX / (9 - k) + 1);
          int t = vetor[num];
          vetor[num] = vetor[k];
          vetor[k] = t+1;
     }     
}

void iniciarMatriz(VetorBi *matriz, int *vetor){

     int i,j;
     
     for ( i = 0; i < 9; i++ )
     {                   
       for ( j = 0; j < 9; j++ )
       {                                  
          matriz->matriz[i][j] = 0;        
       }            
     }
     
     for (i = 0; i < 9; i++)
     {
        vetor[i] = i;  
     }   
}

int verificaLinha(VetorBi *matriz, int iFinal, int jFinal, int addNum){
     int i,j, resp=1;
                     
       for ( j = 0; j < jFinal; j++ )
       {                                  
          if(addNum == matriz->matriz[iFinal][j]){
             resp = 1; 
             break;
          } 
          
          else resp = 0;     
       } 
     
     return resp;           
}

int verificaColuna(VetorBi *matriz, int jFinal, int addNum){
     int j, resp=1;
                     
       for ( j = 0; j < jFinal; j++ )
       {                                  
          if(addNum == matriz->matriz[j][jFinal]){
             resp = 1; 
             break;
          } 
          
          else resp = 0;     
       }
     
     return resp;           
}

int verificatresPorTres(VetorBi *matriz, int iInicial, int jInicial, int iFinal, int jFinal, int addNum){
     int i,j, resp=0;
      
      if(jFinal > jInicial)
      {
       for ( i = iInicial; i <= iFinal; i++ )
       {              
           for ( j = jInicial; j <= jFinal; j++ )
           {                              
              if(addNum == matriz->matriz[i][j]){
                 resp = 1; 
                 break;
              } 
              
              else if(addNum != matriz->matriz[i][j] && (jInicial+1) == jFinal) resp = 0;  
           }
       }
     }
     return resp;           
}

int verificaNum(VetorBi *matriz, int addNum, int i, int j, int iInicial, int jInicial, int iFinal, int jFinal){
    int verifLinha=0, verifColuna=0;
    
    if(j>2)verifLinha = verificaLinha(matriz, i, j, addNum);
    if(j>0)verifColuna = verificaColuna(matriz, j, addNum);
    else verifColuna = verificaColuna(matriz, i, addNum);             
    
    if(verifLinha == 0 && verifColuna == 0) return 1;
    else return 0;
    
}

int trocarValor(VetorBi *matriz, int iInicial, int jInicial, int iFinal, int jFinal){
    int terminou=0 ,i, j, verifRegiao=0,num=1,achou=0,cont=0,iAtual,jAtual,aux,verifUm,verifDois;
    
    do
    {
        for ( i = iInicial; i <= iFinal; i++ )
        {                   
              for ( j = jInicial; j <= jFinal; j++ )
              {
                if(matriz->matriz[i][j] != num) {
                   cont++;
                }
              }   
        }
        
        if(cont == 9){
           for ( i = iInicial; i <= iFinal; i++ )
           {                   
              for ( j = jInicial; j <= jFinal; j++ )
              {
                if(matriz->matriz[i][j] == 0) {
                   matriz->matriz[i][j] = num;
                   iAtual=i;
                   jAtual=j;
                   
                   break;
                }
              }   
           }

           for ( i = iInicial; i <= iFinal; i++ )
           {                   
              for ( j = jInicial; j <= jFinal; j++ )
              {
                verifUm = verificaNum(matriz, matriz->matriz[i][j], iAtual, jAtual, iInicial, jInicial, iFinal, jFinal);
                if(verifUm==1){
                   
                    verifDois = verificaNum(matriz, matriz->matriz[iAtual][jAtual], i, j, iInicial, jInicial, iFinal, jFinal);
                    if(verifDois==1){
                       aux = matriz->matriz[i][j];
                       matriz->matriz[i][j] = matriz->matriz[iAtual][jAtual];
                       matriz->matriz[iAtual][jAtual] = aux;
                       i= iFinal;
                       j = jFinal;
                    }                              
                }                                        
              }   
           }
           achou =1;       
        }
        
        else cont=0;
        
        num++;
        i = iInicial;
        j = jInicial;
    }while(achou !=1);
       
    return terminou;
}

void atribuirValores(VetorBi *matriz){
   int i,j, iInicial, iFinal, jInicial, jFinal, num, cont=0, addNum=1, terminou =0,acabou=0, aux,tentativa=0;
   int verifLinha=0, verifColuna=0, verifRegiao=0; 
   
   iInicial = 0;
   iFinal = 2;
   jInicial = 0;
   jFinal = 2; 
   int vetor[9];   
    
   srand( time(NULL) );
   
   iniciarMatriz(matriz, vetor);      
   embaralharNumeros(vetor);      
       
   do 
   {
       for ( i = iInicial; i <= iFinal; i++ )
       {                   
              for ( j = jInicial; j <= jFinal; j++ )
              {
                  if(iFinal <=2 && jFinal <= 2){                                 
                      matriz->matriz[i][j] = vetor[cont];  
                      cont++;                     
                  }                 
                  else{
                       
                       terminou = 0;  
                       do{
                           if(j>2)verifLinha = verificaLinha(matriz, i, j, addNum);
                           if(j>0)verifColuna = verificaColuna(matriz, j, addNum);
                           else verifColuna = verificaColuna(matriz, i, addNum);
                           
                           verifRegiao = verificatresPorTres(matriz, iInicial, jInicial, i, jFinal, addNum);
                           
                           if(verifLinha == 0 && verifColuna == 0 && verifRegiao == 0){
                             matriz->matriz[i][j] = addNum;
                             tentativa=0;                          
                             terminou = 1;
                           }

                          if(tentativa >10 ){                            
                             trocarValor(matriz, iInicial, jInicial, iFinal, jFinal);
                             terminou = 1;
                          }
                         if(addNum<9)addNum++;
                         tentativa++;
                         
                       }while(terminou != 1);
                       tentativa=0;
                       addNum = 1;
                  }
                  verifLinha=0;
                  verifColuna=0;
                  verifRegiao=0;              
              }            
       }
        printf("\n");
       
       cont = 0;
       embaralharNumeros(vetor);
       jInicial = jFinal + 1;
       jFinal = jFinal + 3;
       
       if(jFinal > 8){
          iInicial = iFinal + 1;
          iFinal = iFinal + 3; 
          jInicial = 0;
          jFinal = 2;         
       }

   }while(iFinal <9);
}

void gerarJogo(VetorBi *matriz, int num){
     
     int terminou =0,i,j;
     
     do{
         size_t numUm = rand() % 9 + 0;
         size_t numDois = rand() % 9 + 0;
         int tUm = numUm;
         int tDois = numDois;
         for ( i = 0; i <= 8; i++ )
           {               
              for ( j = 0; j <= 8; j++ )
              {
                 if(i==tUm && j==tDois){
                      matriz->matriz[i][j] = 0;          
                 }    
              }
           }
         num--;
     }while(num >0);   
}

void imprimirJogo(VetorBi *matriz, FILE *saida, int num){
   int i,j, op, iInicial, iFinal, jInicial, jFinal, contColuna=1, contLinha=1; 
   
   iInicial = 0;
   iFinal = 2;
   jInicial = 0;
   jFinal = 2;
   
   fprintf (saida, "<style> table{border: 1px solid #333;}\n .bordaColuna{border-right: 3px solid #EC3237;}\n .bordaLinha td{border-bottom: 3px solid #EC3237;}\n td{border: 1px solid #333;padding: 15px;text-align: center;}\n td.gabarito{padding: 6px;}\n h4{padding:0;margin: 0;}\n .hand{cursor: pointer;}\n .branco{color: transparent;font-size:0px}</style>\n");
   fprintf (saida, "<h4>-------------------------------------------------------------------------------------</h4>\n");
   fprintf (saida, "<h3>Jogo</h3>\n");
   fprintf (saida, "<table cellspacing='0'>\n");
   fprintf (saida, "<tbody>\n");
   
   gerarJogo(matriz, num);
       
   do 
   {
       if(contLinha%3 == 0 && contLinha%9 != 0) fprintf (saida, "<tr class='bordaLinha'>\n");
        else fprintf (saida, "<tr>\n");
        
       for ( i = iInicial; i <= iFinal; i++ )
       {               
          for ( j = jInicial; j <= jFinal; j++ )
          { 
             if(contColuna%3 == 0 && contColuna%9 != 0){
                if(matriz->matriz[i][j] != 0)fprintf (saida, "<td class='bordaColuna'>%d</td>\n", matriz->matriz[i][j]); 
                else fprintf (saida, "<td class='branco bordaColuna'>%d</td>\n", matriz->matriz[i][j]); 
             }           
             
             else {
                  if(matriz->matriz[i][j] != 0) fprintf (saida, "<td>%d</td>\n", matriz->matriz[i][j]);
                  else fprintf (saida, "<td class='branco'>%d</td>\n", matriz->matriz[i][j]);
             }

             contColuna++;           
          }  
       }
       contLinha++;
       fprintf (saida, "</tr>\n");

       jInicial = jFinal + 1;
       jFinal = jFinal + 3;
       
       if(jFinal > 8){
          iInicial = iFinal + 1;
          iFinal = iFinal + 3;  
          jInicial = 0;
          jFinal = 2;        
       }

   }while(iFinal <9);
   
   fprintf (saida, "<tbody>\n");
   fprintf (saida, "<table>\n");
}

void imprimirResolucao(VetorBi *matriz, FILE *saida){
   int i,j, iInicial, iFinal, jInicial, jFinal, contColuna=1, contLinha=1; 
   
   iInicial = 0;
   iFinal = 2;
   jInicial = 0;
   jFinal = 2;
     
   fprintf (saida, "<h2>Sudoku <input type='button' name='imprimir' value='Imprimir' title='Imprimir Jogo' alt='Imprimir Jogo' class='hand' onclick='window.print();'></h2>\n");  
   fprintf (saida, "<h3>Gabarito</h3>\n");
   fprintf (saida, "<table cellspacing='0'>\n");
   fprintf (saida, "<tbody>\n");
   do 
   {
       if(contLinha%3 == 0 && contLinha%9 != 0) fprintf (saida, "<tr class='bordaLinha'>\n");
        else fprintf (saida, "<tr>\n");
        
       for ( i = iInicial; i <= iFinal; i++ )
       {               
          for ( j = jInicial; j <= jFinal; j++ )
          { 
             if(contColuna%3 == 0 && contColuna%9 != 0)fprintf (saida, "<td class='gabarito bordaColuna'>%d</td>\n", matriz->matriz[i][j]);
             
             else fprintf (saida, "<td class='gabarito'>%d</td>\n", matriz->matriz[i][j]);  
             contColuna++;           
          } 
       }
       
       contLinha++;
       fprintf (saida, "</tr>\n");

       jInicial = jFinal + 1;
       jFinal = jFinal + 3;
       
       if(jFinal > 8){
          iInicial = iFinal + 1;
          iFinal = iFinal + 3;  
          jInicial = 0;
          jFinal = 2;        
       }

   }while(iFinal <9);
   
   fprintf (saida, "<tbody>\n");
   fprintf (saida, "<table>\n");
}

int main(){
    VetorBi *m= matriz(9,9); 
    FILE * saida;
    int i,j,op,num; 
   
    
    saida = fopen ("sudoku.html","w");
    atribuirValores(m);
    
    imprimirResolucao(m,saida);
    imprimirJogo(m,saida, 80);

    desalocar(m);
     
    fclose (saida); 
   // system("pause");
    return 0; 
}
